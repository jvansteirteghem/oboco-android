# https://about.gitlab.com/blog/2018/10/24/setting-up-gitlab-ci-for-android-projects/
# https://android.jlelse.eu/android-gitlab-ci-cd-sign-deploy-3ad66a8f24bf
# https://gitlab.com/gitlab-org/gitlab-foss/-/blob/master/lib/gitlab/ci/templates/Android.latest.gitlab-ci.yml

image: openjdk:11-jdk

variables:

  # ANDROID_COMPILE_SDK is the version of Android you're compiling with.
  # It should match compileSdkVersion.
  ANDROID_COMPILE_SDK: "30"

  # ANDROID_BUILD_TOOLS is the version of the Android build tools you are using.
  # It should match buildToolsVersion.
  ANDROID_BUILD_TOOLS: "30.0.3"

  # It's what version of the command line tools we're going to download from the official site.
  # Official Site-> https://developer.android.com/studio/index.html
  # There, look down below at the cli tools only, sdk tools package is of format:
  #        commandlinetools-os_type-ANDROID_SDK_TOOLS_latest.zip
  # when the script was last modified for latest compileSdkVersion, it was which is written down below
  ANDROID_SDK_TOOLS: "7583922"

# Packages installation before running script
before_script:
  - apt-get --quiet update --yes
  - apt-get --quiet install --yes wget tar unzip lib32stdc++6 lib32z1

  # Setup path as ANDROID_SDK_ROOT for moving/exporting the downloaded sdk into it
  - export ANDROID_SDK_ROOT="${PWD}/android-home"
  # Create a new directory at specified location
  - install -d $ANDROID_SDK_ROOT
  # Here we are installing androidSDK tools from official source,
  # (the key thing here is the url from where you are downloading these sdk tool for command line, so please do note this url pattern there and here as well)
  # after that unzipping those tools and
  # then running a series of SDK manager commands to install necessary android SDK packages that'll allow the app to build
  - wget --output-document=$ANDROID_SDK_ROOT/cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-${ANDROID_SDK_TOOLS}_latest.zip
  # move to the archive at ANDROID_SDK_ROOT
  - pushd $ANDROID_SDK_ROOT
  - unzip -d cmdline-tools cmdline-tools.zip
  - pushd cmdline-tools
  # since commandline tools version 7583922 the root folder is named "cmdline-tools" so we rename it if necessary
  - mv cmdline-tools tools || true
  - popd
  - popd
  - export PATH=$PATH:${ANDROID_SDK_ROOT}/cmdline-tools/tools/bin/

  # Nothing fancy here, just checking sdkManager version
  - sdkmanager --version

  # use yes to accept all licenses
  - yes | sdkmanager --licenses || true
  - sdkmanager "platforms;android-${ANDROID_COMPILE_SDK}"
  - sdkmanager "platform-tools"
  - sdkmanager "build-tools;${ANDROID_BUILD_TOOLS}"

  # Not necessary, but just for surity
  - chmod +x ./gradlew

stages:
  - build
  - test
  - prepare
  - release

lintDebug:
  stage: build
  script:
    - ./gradlew -Pci --console=plain :app:lintDebug -PbuildDir=lint

assembleDebug:
  stage: build
  script:
    - ./gradlew assembleDebug

debugTests:
  stage: test
  script:
    - ./gradlew -Pci --console=plain :app:testDebug

assembleRelease:
  stage: prepare
  script:
    # install ssh agent if ssh agent is not installed
    - '(which ssh-agent) || ( apt-get update -y && apt-get install openssh-client -y )'
    # run ssh agent
    - eval $(ssh-agent -s)
    # add the ssh key stored in the SSH_PRIVATE_KEY variable to the ssh agent store
    - ssh-add <(echo "$SSH_PRIVATE_KEY")
    # disable host key check
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - git config user.name "jeeto jeeto"
    - git config user.email "jeeto.jeeto@gmail.com"
    # detached HEAD is checked out
    # check out branch in the CI_BUILD_REF_NAME variable
    - git checkout -B "$CI_BUILD_REF_NAME"
    # set repository url
    - repositoryUrl=`awk '/repositoryUrl/ {print $4}' app/build.gradle | tr -d \"`
    - git remote set-url origin "$repositoryUrl"
    # release
    # get and set releaseVersionName
    - releaseVersionName=`awk '/releaseVersionName/ {print $4}' app/build.gradle | tr -d \"`
    - sed -i 's/versionName "[^"]*"/versionName "'"$releaseVersionName"'"/' app/build.gradle
    # get and set releaseVersionCode
    - releaseVersionCode=`awk '/releaseVersionCode/ {print $4}' app/build.gradle`
    - sed -i 's/versionCode [0-9]*/versionCode '"$releaseVersionCode"'/' app/build.gradle
    # push
    - git add app/build.gradle
    - git commit -m "[skip ci] release $releaseVersionName ($releaseVersionCode)"
    - git push origin master
    # build
    - echo $KEYSTORE_FILE | base64 -d > keystore.jks
    - ./gradlew assembleRelease -Pandroid.injected.signing.store.file=$(pwd)/keystore.jks -Pandroid.injected.signing.store.password=$KEYSTORE_PASSWORD -Pandroid.injected.signing.key.alias=$KEY_ALIAS -Pandroid.injected.signing.key.password=$KEY_PASSWORD
    # push tag
    - git tag -a "$releaseVersionName" -m "[skip ci] tag release $releaseVersionName ($releaseVersionCode)"
    - git push --tags
    # development
    # get and set developmentVersionName
    - developmentVersionName=`awk '/developmentVersionName/ {print $4}' app/build.gradle | tr -d \"`
    - sed -i 's/versionName "[^"]*"/versionName "'"$developmentVersionName"'"/' app/build.gradle
    # get and set developmentVersionCode
    - developmentVersionCode=`awk '/developmentVersionCode/ {print $4}' app/build.gradle`
    - sed -i 's/versionCode [0-9]*/versionCode '"$developmentVersionCode"'/' app/build.gradle
    # push
    - git add app/build.gradle
    - git commit -m "[skip ci] $developmentVersionName ($developmentVersionCode)"
    - git push origin master
    - echo $CI_JOB_ID
    - echo RELEASE_JOB_ID=$CI_JOB_ID >> release.env
    - echo $releaseVersionName
    - echo RELEASE_VERSION=$releaseVersionName >> release.env
    - mkdir release
    - mv app/build/outputs/apk/release/app-release.apk release/oboco-android-${releaseVersionName}.apk
  artifacts:
    paths:
      - release/
    reports:
      dotenv: release.env
  when: manual
  only:
     - master

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  # override global before_script
  before_script:
    - echo "release"
  script:
    - echo $RELEASE_JOB_ID
    - echo $RELEASE_VERSION
  needs:
    - job: assembleRelease
      artifacts: true
  release:
    name: "oboco-android-${RELEASE_VERSION}"
    description: "oboco-android-${RELEASE_VERSION}"
    tag_name: "${RELEASE_VERSION}"
    assets:
      links:
        - name: "oboco-android-${RELEASE_VERSION}"
          url: "https://gitlab.com/jeeto/oboco-android/-/jobs/${RELEASE_JOB_ID}/artifacts/file/release/oboco-android-${RELEASE_VERSION}.apk"
  only:
    - master